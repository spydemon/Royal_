package net.sf.royal.gui.manager;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

import net.sf.royal.exception.DefaultException;
import net.sf.royal.exception.RoyalException;

import org.apache.log4j.Logger;

public class PropertyManager {

    private final static Logger logger = Logger.getLogger(PropertyManager.class);
    
    private static PropertyManager instance = new PropertyManager();
    private Properties properties = new Properties();
    private String file = null;
    private Properties systemProperties = new Properties();
    
    public static final String sep = System.getProperty("file.separator");
    
    private PropertyManager(){
        try {
        	String systemFile;
        	if(System.getProperty("os.name").toLowerCase().indexOf("win") != -1)
        	{
        		systemFile = "system_win.properties";
        	}
        	else
        	{
        		systemFile = "system_unix.properties";
        	}
        	File sysfile = new File(systemFile);
        	systemProperties.load(new FileInputStream(sysfile));
            //systemProperties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(systemFile));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void initUser(){
		String path = System.getProperty("user.dir");
		// If the program is launched from its directory
		if(path == null)
			this.file = "resources" + sep + "royal.properties";
		// Otherwise, we prefix the resources by the path
		else
			this.file = path + sep + "resources" + sep + "royal.properties";
		try {
		    properties.load(new FileInputStream(this.file));
		} catch (Exception e) {
		    RoyalException be = new DefaultException(e, RoyalException.FATAL);
		    be.manageException();
		}
    }
    
    /**
     * Return a property from its key
     * @param key
     * @return
     */
    public String getProperty(String key){
        if (properties.isEmpty()){
            this.initUser();
        }
        return properties.getProperty(key);
    }
    
    public String getSystemProperty(String key){
        return systemProperties.getProperty(key);
    }
    
    public String getPathProperty(String key){
        return System.getProperty("user.home") + sep + ".royal" + sep + systemProperties.getProperty(key);
    }

	public String getHomeRoyalPath()
	{
		return System.getProperty("user.home") + sep + ".royal" + sep;
	}
    
    public static PropertyManager getInstance(){
        return instance;
    }
    
    /**
     * Get the head for html img tag
     * @return file:\\ for windows, file:// for others
     */
    public static String getHTMLImgHead(){
        if(sep.equals("\\")){
            return "file:\\";
        } else {
            return "file://";
        }
    }

    public void changeProperty(String propertyName, Object value){
        if (properties.isEmpty()){
            this.initUser();
        }
        properties.put(propertyName, value);
    }
    
    public void save(){
        if (properties.isEmpty()){
            this.initUser();
        }
        try {
            properties.store(new FileOutputStream(this.file), "Generated by Royal");
            logger.debug("Properties saved");
        } catch (Exception e) {
            RoyalException be = new DefaultException(e, RoyalException.FATAL);
            be.manageException();
        }
    }
    
    public void printProperties(){
        if (properties.isEmpty()){
            this.initUser();
        }
        System.out.println("Props : " + this.properties);
        System.out.println("Sys Props : " + this.systemProperties);
    }
}
